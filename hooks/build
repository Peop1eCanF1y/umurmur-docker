#!/bin/bash
# set  -x
printf "\n##########################"
printf "\n##  Start Custom Build  ##"
printf "\n##########################"


VERSION="$(grep 'ARG VERSION=' Dockerfile | awk -F'=' '{ print $2 }' | tr -d '"' )"
if [[ "$SOURCE_BRANCH" =~ ^[0-9.]+$ ]]; then
	printf "\n[RELEASE] Build for Repo: %s" 	"$DOCKER_REPO"
else
	if [[ "$SOURCE_BRANCH" == "master" ]]; then
		printf "\n[MASTER] Not Building from master"
		exit 0
	fi
	printf "\n[TEST] Build for Repo: %s" 	"$DOCKER_REPO"
fi
printf "\n-- SOURCE_BRANCH	: %s" 				"$SOURCE_BRANCH"
printf "\n-- SOURCE_COMMIT	: %s (%s)" 		"$SOURCE_COMMIT" 	"$COMMIT_MSG"
printf "\n-- IMAGE_NAME 		: %s (%s)" 		"$IMAGE_NAME" 		"$CACHE_TAG"
printf "\n-- UMURMUR VERSION: %s" 				"$VERSION"
printf "\n--------------------------------\n"

# tells if it should be latest image
latest(){
	if echo "$SOURCE_BRANCH" | grep -Eq "^[0-9.]+$" ; then
		# only build latest image if it's built from numerical tag
		return 0
	fi
	return 1
}

formatTags(){
	local d=" -t "
	printf "%s" "${@/#/$d}"
}

buildUmurmur(){
	UMURMUR_VERSION="$1"
	SSL="$2"
	BUILD_NUMURMON="$3"
	BUILD_UMURMUR_MONITOR="$4"
	NAME="$5"

	if [ "$BUILD_NUMURMON" = "On" ] && [ "$BUILD_UMURMUR_MONITOR" = "On" ]; then
		tags=("$DOCKER_REPO:$SOURCE_BRANCH" "$NAME" "$NAME-full")
		# tags="-t $DOCKER_REPO:$SOURCE_BRANCH -t $NAME -t $NAME-full"
		NAME="$NAME-full"
		if latest; then
			# add tag for latest
			# tags="$tags -t $DOCKER_REPO:latest"
			tags+=("$DOCKER_REPO:latest")
		fi
	else
		[ "$BUILD_NUMURMON" = "On" ] \
			&& NAME="$NAME-numurmon" && tags=("$NAME")
		[ "$BUILD_UMURMUR_MONITOR" = "On" ] \
			&& NAME="$NAME-umonitor" && tags=("$NAME")
		[ "$BUILD_NUMURMON" = "Off" ] && [ "$BUILD_UMURMUR_MONITOR" = "Off" ] \
			&& NAME="$NAME-light" && tags=("$NAME")
	fi

	printf "\n\n## Building %s ##\n" "$NAME"
	if docker build $(formatTags "${tags[@]}") --build-arg VERSION="$UMURMUR_VERSION" --build-arg SSL="$SSL" --build-arg BUILD_NUMURMON="$BUILD_NUMURMON" --build-arg BUILD_UMURMUR_MONITOR="$BUILD_UMURMUR_MONITOR" . ; then
		# mark all tags of this image as pushable
		for t in "${tags[@]}"; do
			echo "$t" >> hooks/names
		done
	else
		printf "\nCannot build %s" "$NAME"
		exit 1
	fi
}

echo "" > hooks/names
for crypto in "openssl"; do
	for b_numurmon in "On" "Off"; do
		for b_umonitor in "On" "Off"; do
			buildUmurmur "$VERSION" $crypto $b_numurmon $b_umonitor "$DOCKER_REPO:$SOURCE_BRANCH-$VERSION"
		done
	done
done
